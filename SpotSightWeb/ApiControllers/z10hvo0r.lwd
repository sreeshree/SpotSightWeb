using SpotSightWeb.DAL;
using SpotSightWeb.Models;
using SpotSightWeb.ViewModel;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Web.Http;
using System.Web.Http.Description;

namespace SpotSightWeb.ApiControllers
{
    public class ItemController : ApiController
    {
        private SpotSightContext db = new SpotSightContext();

        // GET api/Item
        public IList<ItemViewModel> GetItems()
        {
            var tst = db.Items.Select(i => new ItemViewModel()
                {
                    AudioUrl = i.AudioUrl,
                    categoryId = i.categoryId,
                    Description = i.Description,
                    Id = i.Id,
                    ImageUrl = i.ImageUrl,
                    IsPush = i.IsPush,
                    MajorNumber = i.MajorNumber,
                    MinorNumber = i.MinorNumber,
                    Title = i.Title,
                    UUId = i.UUId,
                    VideoUrl = i.VideoUrl
                }).ToList();

            return tst;
        }

        // GET api/Item/5
        [ResponseType(typeof(ItemViewModel))]
        public IHttpActionResult GetItem(int id)
        {
            Item item = db.Items.Find(id);
            if (item == null)
            {
                return NotFound();
            }

            return Ok(new ItemViewModel
             {
                 AudioUrl = item.AudioUrl,
                 categoryId = item.categoryId,
                 Description = item.Description,
                 Id = item.Id,
                 ImageUrl = item.ImageUrl,
                 IsPush = item.IsPush,
                 MajorNumber = item.MajorNumber,
                 MinorNumber = item.MinorNumber,
                 Title = item.Title,
                 UUId = item.UUId,
                 VideoUrl = item.VideoUrl
             }
            );
        }

        // PUT api/Item/5
        public IHttpActionResult PutItem(int id, Item item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != item.Id)
            {
                return BadRequest();
            }

            db.Entry(item).State = EntityState.Modified;

            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ItemExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST api/Item
        [ResponseType(typeof(Item))]
        public IHttpActionResult PostItem(Item item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.Items.Add(item);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = item.Id }, item);
        }

        // DELETE api/Item/5
        [ResponseType(typeof(Item))]
        public IHttpActionResult DeleteItem(int id)
        {
            Item item = db.Items.Find(id);
            if (item == null)
            {
                return NotFound();
            }

            db.Items.Remove(item);
            db.SaveChanges();

            return Ok(item);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool ItemExists(int id)
        {
            return db.Items.Count(e => e.Id == id) > 0;
        }
    }
}